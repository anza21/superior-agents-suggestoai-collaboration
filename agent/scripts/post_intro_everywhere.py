import os
from datetime import datetime
from dotenv import load_dotenv

print("[DEBUG] Ξεκίνησε το script post_intro_everywhere.py")

# Load environment variables
load_dotenv()

try:
    # Import API clients
    from src.agent.affiliate_promoter import DevtoAPIClient, HashnodeAPIClient, BloggerAPIClient, LinkedInAPIClient
    from src.sensor.affiliate_promoter import AffiliatePromoterTwitterClient
    print("[DEBUG] Imports OK!")
except Exception as e:
    print("[IMPORT ERROR]", e)
    raise

# Facebook API (simple POST)
import requests

# Output folder for mock posts
OUTPUT_DIR = "demo_output/"
os.makedirs(OUTPUT_DIR, exist_ok=True)

# English Intro Post (for publishing)
POST_TITLE_EN = "What is SuggestoAI?"
POST_BODY_EN = (
    "SuggestoAI is your smart AI agent that finds, compares, and recommends top affiliate products from Amazon, AliExpress, and more. "
    "Our goal is to help you discover the best products, save time, and trust every suggestion!\n\n"
    "What we offer:\n"
    "- Automatic discovery of trending, quality products.\n"
    "- Reliable comparisons and reviews powered by AI.\n"
    "- Content creation (articles, Q&A, videos) for each product.\n"
    "- Publishing across multiple channels (Facebook, blogs, etc.).\n"
    "- Affiliate links so you can earn from every purchase.\n\n"
    "What to expect from us:\n"
    "- Continuous updates with new suggestions and reviews.\n"
    "- Honesty and transparency in every recommendation (affiliate disclosure).\n"
    "- Easy access to all our suggestions via our website: https://suggestoai.com/index.html\n"
    "- Multi-language support – coming soon in Spanish, French, Italian, German!\n\n"
    "Follow us to discover the best products, easily and smartly!\n"
    "\n(This post contains affiliate links. Content generated by AI.)"
)
POST_TAGS = ["affiliate", "review", "aigenerated", "suggestoai"]

# Greek reference (for logs/mock)
POST_TITLE_GR = "Τι είναι το SuggestoAI;"
POST_BODY_GR = (
    "Το SuggestoAI είναι ο έξυπνος AI agent που βρίσκει, συγκρίνει και προτείνει κορυφαία affiliate προϊόντα από Amazon, AliExpress και άλλες μεγάλες πλατφόρμες. "
    "Στόχος μας είναι να σας βοηθήσουμε να ανακαλύπτετε τα καλύτερα προϊόντα, να εξοικονομείτε χρόνο και να εμπιστεύεστε κάθε πρόταση!\n\n"
    "Τι προσφέρουμε:\n"
    "- Αυτόματη ανακάλυψη δημοφιλών και ποιοτικών προϊόντων.\n"
    "- Αξιόπιστες συγκρίσεις και αξιολογήσεις με τη βοήθεια AI.\n"
    "- Δημιουργία περιεχομένου (άρθρα, Q&A, βίντεο) για κάθε προϊόν.\n"
    "- Δημοσίευση σε πολλαπλά κανάλια (Facebook, blogs, κ.ά.).\n"
    "- Affiliate links για να κερδίζετε από κάθε αγορά.\n\n"
    "Τι να περιμένετε από εμάς:\n"
    "- Συνεχή ενημέρωση με νέες προτάσεις και reviews.\n"
    "- Ειλικρίνεια και διαφάνεια σε κάθε σύσταση (affiliate disclosure).\n"
    "- Εύκολη πρόσβαση σε όλες τις προτάσεις μας μέσω του site μας: https://suggestoai.com/index.html\n"
    "- Υποστήριξη σε πολλές γλώσσες – σύντομα και στα Ισπανικά, Γαλλικά, Ιταλικά, Γερμανικά!\n\n"
    "Ακολουθήστε μας για να ανακαλύπτετε τα καλύτερα προϊόντα, εύκολα και έξυπνα!\n"
    "\n(This post contains affiliate links. Content generated by AI.)"
)

# Helper: Save mock post
# Save both EN (for presentation) and GR (for your reference)
def save_mock(platform, title_en, body_en, title_gr, body_gr):
    fname = f"{OUTPUT_DIR}{platform}_intro_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(fname, "w", encoding="utf-8") as f:
        f.write(f"[ENGLISH POST FOR PRESENTATION]\nTitle: {title_en}\n\n{body_en}\n\n---\n[ΕΛΛΗΝΙΚΗ ΑΝΑΦΟΡΑ]\nΤίτλος: {title_gr}\n\n{body_gr}\n")
    print(f"[MOCK] Αποθηκεύτηκε το εισαγωγικό post για {platform} στο {fname}")

try:
    print("[DEBUG] Checking API tokens...")
    # Facebook
    FB_TOKEN = os.getenv("FACEBOOK_ACCESS_TOKEN")
    FB_PAGE_ID = os.getenv("FACEBOOK_PAGE_ID")
    # Dev.to
    devto_client = DevtoAPIClient() if os.getenv("DEVTO_API_KEY") else None
    # Hashnode
    hashnode_client = HashnodeAPIClient() if os.getenv("HASHNODE_TOKEN") else None
    # Blogger
    blogger_client = BloggerAPIClient() if os.getenv("GOOGLE_OAUTH_TOKEN") else None
    # Twitter
    twitter_client = AffiliatePromoterTwitterClient() if os.getenv("TWITTER_BEARER_TOKEN") else None

    print("[DEBUG] Starting publishing flow...")
    # Facebook Page
    if FB_TOKEN and FB_PAGE_ID:
        print("[DEBUG] Facebook token found, trying to post...")
        url = f"https://graph.facebook.com/v19.0/{FB_PAGE_ID}/feed"
        payload = {"message": f"{POST_TITLE_EN}\n\n{POST_BODY_EN}", "access_token": FB_TOKEN}
        try:
            resp = requests.post(url, data=payload, timeout=10)
            if resp.status_code in [200, 201]:
                print("[Facebook] Δημοσιεύτηκε το εισαγωγικό post στα αγγλικά!")
            else:
                print(f"[Facebook] API error: {resp.status_code}")
                print(resp.text)
                save_mock("facebook", POST_TITLE_EN, POST_BODY_EN, POST_TITLE_GR, POST_BODY_GR)
        except Exception as e:
            print("[Facebook] Exception:", e)
            save_mock("facebook", POST_TITLE_EN, POST_BODY_EN, POST_TITLE_GR, POST_BODY_GR)
    else:
        print("[DEBUG] Facebook token missing, saving mock...")
        save_mock("facebook", POST_TITLE_EN, POST_BODY_EN, POST_TITLE_GR, POST_BODY_GR)

    # Dev.to
    if devto_client:
        print("[DEBUG] Dev.to token found, trying to post...")
        devto_client.publish_article(
            title=POST_TITLE_EN,
            body_markdown=POST_BODY_EN,
            tags=POST_TAGS,
            canonical_url="https://suggestoai.com/index.html",
            published=True
        )
        print("[Dev.to] Δημοσιεύτηκε το εισαγωγικό post στα αγγλικά!")
    else:
        print("[DEBUG] Dev.to token missing, saving mock...")
        save_mock("devto", POST_TITLE_EN, POST_BODY_EN, POST_TITLE_GR, POST_BODY_GR)

    # Hashnode
    if hashnode_client:
        print("[DEBUG] Hashnode token found, trying to post...")
        hashnode_client.publish_article(
            title=POST_TITLE_EN,
            content_markdown=POST_BODY_EN,
            tags=POST_TAGS,
            published=True
        )
        print("[Hashnode] Δημοσιεύτηκε το εισαγωγικό post στα αγγλικά!")
    else:
        print("[DEBUG] Hashnode token missing, saving mock...")
        save_mock("hashnode", POST_TITLE_EN, POST_BODY_EN, POST_TITLE_GR, POST_BODY_GR)

    # Blogger
    if blogger_client:
        print("[DEBUG] Blogger token found, trying to post...")
        blogger_client.publish_post(
            title=POST_TITLE_EN,
            content=POST_BODY_EN,
            labels=POST_TAGS,
            published=True
        )
        print("[Blogger] Δημοσιεύτηκε το εισαγωγικό post στα αγγλικά!")
    else:
        print("[DEBUG] Blogger token missing, saving mock...")
        save_mock("blogger", POST_TITLE_EN, POST_BODY_EN, POST_TITLE_GR, POST_BODY_GR)

    # Twitter
    if twitter_client:
        print("[DEBUG] Twitter publishing είναι mock λόγω περιορισμών του free plan.")
        save_mock("twitter", POST_TITLE_EN, POST_BODY_EN, POST_TITLE_GR, POST_BODY_GR)
        print("[MOCK] Το εισαγωγικό post για Twitter αποθηκεύτηκε ως mock (δεν επιτρέπεται post με free plan).")
    else:
        print("[DEBUG] Twitter token missing, saving mock...")
        save_mock("twitter", POST_TITLE_EN, POST_BODY_EN, POST_TITLE_GR, POST_BODY_GR)

    # Medium, LinkedIn, Instagram: mock only (not active)
    for platform in ["medium", "linkedin", "instagram"]:
        print(f"[DEBUG] Saving mock for {platform}...")
        save_mock(platform, POST_TITLE_EN, POST_BODY_EN, POST_TITLE_GR, POST_BODY_GR)

    print("\n[Ολοκληρώθηκε] Το εισαγωγικό post μεταδόθηκε σε όλα τα διαθέσιμα κανάλια (αγγλικά για παρουσίαση, ελληνικά για αναφορά).\n")
except Exception as e:
    print("[ERROR] Exception in main script:", e) 